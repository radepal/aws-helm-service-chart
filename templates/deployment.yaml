{{- $serviceName := include "service.name" . -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.deployment.spec.replicas }}
  selector:
    matchLabels:
      app: {{ $serviceName }}
  template:
    metadata:
      labels:
        app: {{ $serviceName }}
      {{- if .Values.datadog.enabled }}
      annotations:
        ad.datadoghq.com/{{ $serviceName }}.check_names: '["{{ $serviceName }}"]'
        ad.datadoghq.com/{{ $serviceName }}.init_configs: '[{}]'
        ad.datadoghq.com/{{ $serviceName }}.logs: '[{"source":"{{ .Values.datadog.source.service }}", "service":"{{ $serviceName }}" }]'
        ad.datadoghq.com/{{ $serviceName }}.tags: '{"team": "DVPE"}'
        {{- if .Values.oauth2.enabled }}
        ad.datadoghq.com/{{ $serviceName }}-auth-sidecar.check_names: '["{{ $serviceName }}-auth-sidecar"]'
        ad.datadoghq.com/{{ $serviceName }}-auth-sidecar.init_configs: '[{}]'
        ad.datadoghq.com/{{ $serviceName }}-auth-sidecar.logs: '[{"source":"{{ .Values.datadog.source.sidecar }}", "service":"{{ $serviceName }}-auth-sidecar" }]'
        ad.datadoghq.com/{{ $serviceName }}-auth-sidecar.tags: '{"team": "DVPE"}'
        {{- end }}
      {{- end }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.deployment.spec.image.pullSecrets }}
        - name: {{ .Values.oauth2.sidecar.image.pullSecrets }}
      serviceAccountName: {{ .Values.deployment.spec.serviceAccountName }}
      containers:
    {{- if .Values.oauth2.enabled }}
        - name: {{ $serviceName }}-auth-sidecar
          image: "{{ .Values.oauth2.sidecar.image.repository }}/{{ .Values.oauth2.sidecar.image.name }}:{{ .Values.oauth2.sidecar.image.tag }}"
          imagePullPolicy: {{ .Values.oauth2.sidecar.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ $serviceName }}-auth-sidecar
            - secretRef:
                  name: {{ $serviceName }}-auth-sidecar
          {{- if .Values.datadog.enabled }}
          env:
            - name: "ENABLE_DATADOG"
              value: {{ quote .Values.datadog.enabled }}
            - name: "DD_AGENT_HOST"
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: "DD_SERVICE"
              value: {{ $serviceName }}-auth-sidecar
          {{- end}}
          ports:
            - name: http
              containerPort: {{ .Values.oauth2.sidecar.servicePort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.oauth2.sidecar.servicePort }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.deployment.spec.resources | nindent 12 }}
    {{- end }}
        - name: {{ $serviceName }}
          image: {{ include "image.url" . }}
          imagePullPolicy: {{ .Values.deployment.spec.image.pullPolicy }}

          env:
            {{- if .Values.project.includeAwsCredentials }}
            - name: "AWS_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ $serviceName }}-secret
                  key: aws.accesskey
            - name: "AWS_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ $serviceName }}-secret
                  key: aws.secretkey
            {{- end}}
            {{- if .Values.datadog.enabled }}
            - name: "ENABLE_DATADOG"
              value: {{ quote .Values.datadog.enabled }}
            - name: "DD_AGENT_HOST"
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: "DD_SERVICE_NAME"
              value: {{ $serviceName }}
            {{- end}}
            {{- if .Values.additionalparameters.configMapApplied }}
            {{- range $key, $value := .Values.additionalparameters.config }}
            - name: "{{$key}}"
              valueFrom:
                configMapKeyRef:
                  name:  {{ $serviceName }}-additional-parametes
                  key: {{$key}}
            {{- end}}
            {{- end}}
            {{- if .Values.additionalparameters.secretsApplied }}
            {{- range $key, $value := .Values.additionalparameters.secrets }}
            - name: "{{$key}}"
              valueFrom:
                secretKeyRef:
                  name:  {{ $serviceName }}-additional-secrets
                  key: {{$key}}
            {{- end}}
            {{- end}}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.spec.containers.readinessProbe.httpGet.path }}
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: {{ .Values.deployment.spec.resources.limits.cpu }}
              memory: {{ .Values.deployment.spec.resources.limits.memory }}
            requests:
              cpu: {{ .Values.deployment.spec.resources.requests.cpu }}
              memory: {{ .Values.deployment.spec.resources.requests.memory }}
          ports:
            - containerPort: {{ .Values.deployment.spec.connection.http.port }}
              name: http
              protocol: TCP
